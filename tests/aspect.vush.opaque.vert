// file generated by vush compiler, from ../../tests/aspect.vush
#version 460
#pragma shader_stage(vertex)
#extension GL_GOOGLE_cpp_style_line_directive : require
#extension GL_GOOGLE_include_directive : require

struct VS_IN {
	vec3 position;
	vec4 color;
	vec2 texcoord;
};

struct VS_OUT {
	vec4 position;
	vec4 color;
	vec2 texcoord;
};

#include "opaque.vuas"

layout(location = 0) out VS_OUT _out;

layout(location = 0+0) in vec3 _VS_IN_position;
layout(location = 0+1) in vec4 _VS_IN_color;
layout(location = 0+2) in vec2 _VS_IN_texcoord;
layout(std140, binding = 0) uniform _aspect_ {
	VP vp;
} _aspect;
layout(std140, binding = 1) uniform _user_ {
	vec4 tint;
	mat4 model_matrix;
} _user;

#line 15 "../../tests/aspect.vush"
VS_OUT opaque_vertex(VS_IN vin, VP vp, vec4 tint, mat4 model_matrix) {
	VS_OUT vout;
	vout.position = vp.projection * vp.view * model_matrix * vec4(vin.position, 1.0);
	vout.texcoord = vin.texcoord;
	vout.color = vin.color * tint;
	return vout;
}

void main() {
	VS_IN vin;
	vin.position = _VS_IN_position;
	vin.color = _VS_IN_color;
	vin.texcoord = _VS_IN_texcoord;
	VP vp = _aspect.vp;
	vec4 tint = _user.tint;
	mat4 model_matrix = _user.model_matrix;
	_out = opaque_vertex(vin, vp, tint, model_matrix);
}