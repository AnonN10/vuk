#pragma once

#include "vuk/Future.hpp"
#include "vuk/SPIRVTemplate.hpp"
#include "vuk/partials/CountWithIndirect.hpp"
#include "vuk/partials/StaticComputePBI.hpp"

namespace vuk {
	namespace detail {
		// TODO: to be replaced in the future with impure unary_map
		template<class T1>
		struct SPIRVScatter : public spirv::SPIRVTemplate<SPIRVScatter<T1>> {
			static constexpr const uint32_t template_bytes[] = {
				0x07230203, 0x00010400, 0x0008000a, 0x0000006d, 0x00000000, 0x00020011, 0x00000001, 0x0006000b, 0x00000001, 0x4c534c47, 0x6474732e, 0x3035342e,
				0x00000000, 0x0003000e, 0x00000000, 0x00000001, 0x000b000f, 0x00000005, 0x00000004, 0x6e69616d, 0x00000000, 0x0000000f, 0x0000002d, 0x00000036,
				0x00000045, 0x0000004a, 0x00000052, 0x00060010, 0x00000004, 0x00000011, 0x00000100, 0x00000001, 0x00000001, 0x00030003, 0x00000002, 0x000001c2,
				0x00040005, 0x00000004, 0x6e69616d, 0x00000000, 0x00070005, 0x0000000b, 0x656e696c, 0x695f7261, 0x7865646e, 0x33757628, 0x0000003b, 0x00030005,
				0x0000000a, 0x00006469, 0x00030005, 0x0000000d, 0x0000706d, 0x00070005, 0x0000000f, 0x4e5f6c67, 0x6f576d75, 0x72476b72, 0x7370756f, 0x00000000,
				0x00030005, 0x0000002c, 0x00786469, 0x00080005, 0x0000002d, 0x475f6c67, 0x61626f6c, 0x766e496c, 0x7461636f, 0x496e6f69, 0x00000044, 0x00040005,
				0x0000002e, 0x61726170, 0x0000006d, 0x00050005, 0x00000034, 0x66667542, 0x6f437265, 0x00746e75, 0x00060006, 0x00000034, 0x00000000, 0x635f6777,
				0x746e756f, 0x00000000, 0x00050006, 0x00000034, 0x00000001, 0x73756e75, 0x00006465, 0x00050006, 0x00000034, 0x00000002, 0x6e756f63, 0x00000074,
				0x00030005, 0x00000036, 0x00000000, 0x00050005, 0x00000043, 0x66667542, 0x754f7265, 0x00000074, 0x00060006, 0x00000043, 0x00000000, 0x61746164,
				0x74756f5f, 0x00000000, 0x00030005, 0x00000045, 0x00000000, 0x00050005, 0x00000048, 0x66667542, 0x6e497265, 0x00000064, 0x00050006, 0x00000048,
				0x00000000, 0x69646e69, 0x00007372, 0x00030005, 0x0000004a, 0x00000000, 0x00050005, 0x00000050, 0x66667542, 0x6e497265, 0x00000000, 0x00050006,
				0x00000050, 0x00000000, 0x61746164, 0x006e695f, 0x00030005, 0x00000052, 0x00000000, 0x00040047, 0x0000000f, 0x0000000b, 0x00000018, 0x00040047,
				0x0000002d, 0x0000000b, 0x0000001c, 0x00040047, 0x00000033, 0x00000006, 0x00000004, 0x00040048, 0x00000034, 0x00000000, 0x00000018, 0x00050048,
				0x00000034, 0x00000000, 0x00000023, 0x00000000, 0x00040048, 0x00000034, 0x00000001, 0x00000018, 0x00050048, 0x00000034, 0x00000001, 0x00000023,
				0x00000004, 0x00040048, 0x00000034, 0x00000002, 0x00000018, 0x00050048, 0x00000034, 0x00000002, 0x00000023, 0x0000000c, 0x00030047, 0x00000034,
				0x00000002, 0x00040047, 0x00000036, 0x00000022, 0x00000000, 0x00040047, 0x00000036, 0x00000021, 0x00000003, 0x00040047, 0x00000042, 0x00000006,
				0x00000004, 0x00050048, 0x00000043, 0x00000000, 0x00000023, 0x00000000, 0x00030047, 0x00000043, 0x00000002, 0x00040047, 0x00000045, 0x00000022,
				0x00000000, 0x00040047, 0x00000045, 0x00000021, 0x00000001, 0x00040047, 0x00000047, 0x00000006, 0x00000004, 0x00040048, 0x00000048, 0x00000000,
				0x00000018, 0x00050048, 0x00000048, 0x00000000, 0x00000023, 0x00000000, 0x00030047, 0x00000048, 0x00000002, 0x00040047, 0x0000004a, 0x00000022,
				0x00000000, 0x00040047, 0x0000004a, 0x00000021, 0x00000002, 0x00040047, 0x0000004f, 0x00000006, 0x00000004, 0x00040048, 0x00000050, 0x00000000,
				0x00000018, 0x00050048, 0x00000050, 0x00000000, 0x00000023, 0x00000000, 0x00030047, 0x00000050, 0x00000002, 0x00040047, 0x00000052, 0x00000022,
				0x00000000, 0x00040047, 0x00000052, 0x00000021, 0x00000000, 0x00040047, 0x00000013, 0x0000000b, 0x00000019, 0x00020013, 0x00000002, 0x00030021,
				0x00000003, 0x00000002, 0x00040015, 0x00000006, 0x00000020, 0x00000000, 0x00040017, 0x00000007, 0x00000006, 0x00000003, 0x00040020, 0x00000008,
				0x00000007, 0x00000007, 0x00040021, 0x00000009, 0x00000006, 0x00000008, 0x00040020, 0x0000000e, 0x00000001, 0x00000007, 0x0004003b, 0x0000000e,
				0x0000000f, 0x00000001, 0x0004002b, 0x00000006, 0x00000011, 0x00000100, 0x0004002b, 0x00000006, 0x00000012, 0x00000001, 0x0006002c, 0x00000007,
				0x00000013, 0x00000011, 0x00000012, 0x00000012, 0x0004002b, 0x00000006, 0x00000015, 0x00000002, 0x00040020, 0x00000016, 0x00000007, 0x00000006,
				0x0004002b, 0x00000006, 0x0000001c, 0x00000000, 0x0004003b, 0x0000000e, 0x0000002d, 0x00000001, 0x0004001c, 0x00000033, 0x00000006, 0x00000015,
				0x0005001e, 0x00000034, 0x00000006, 0x00000033, 0x00000006, 0x00040020, 0x00000035, 0x0000000c, 0x00000034, 0x0004003b, 0x00000035, 0x00000036,
				0x0000000c, 0x00040015, 0x00000037, 0x00000020, 0x00000001, 0x0004002b, 0x00000037, 0x00000038, 0x00000002, 0x00040020, 0x00000039, 0x0000000c,
				0x00000006, 0x00020014, 0x0000003c, 0x00030016, 0x00000041, 0x00000020, 0x0003001d, 0x00000042, 0x00000041, 0x0003001e, 0x00000043, 0x00000042,
				0x00040020, 0x00000044, 0x0000000c, 0x00000043, 0x0004003b, 0x00000044, 0x00000045, 0x0000000c, 0x0004002b, 0x00000037, 0x00000046, 0x00000000,
				0x0003001d, 0x00000047, 0x00000006, 0x0003001e, 0x00000048, 0x00000047, 0x00040020, 0x00000049, 0x0000000c, 0x00000048, 0x0004003b, 0x00000049,
				0x0000004a, 0x0000000c, 0x0003001d, 0x0000004f, 0x00000041, 0x0003001e, 0x00000050, 0x0000004f, 0x00040020, 0x00000051, 0x0000000c, 0x00000050,
				0x0004003b, 0x00000051, 0x00000052, 0x0000000c, 0x00040020, 0x00000055, 0x0000000c, 0x00000041, 0x00050036, 0x00000002, 0x00000004, 0x00000000,
				0x00000003, 0x000200f8, 0x00000005, 0x0004003b, 0x00000016, 0x0000002c, 0x00000007, 0x0004003b, 0x00000008, 0x0000002e, 0x00000007, 0x0004003d,
				0x00000007, 0x0000002f, 0x0000002d, 0x0003003e, 0x0000002e, 0x0000002f, 0x00050039, 0x00000006, 0x00000030, 0x0000000b, 0x0000002e, 0x0003003e,
				0x0000002c, 0x00000030, 0x0004003d, 0x00000006, 0x00000031, 0x0000002c, 0x00050084, 0x00000006, 0x00000032, 0x00000015, 0x00000031, 0x00050041,
				0x00000039, 0x0000003a, 0x00000036, 0x00000038, 0x0004003d, 0x00000006, 0x0000003b, 0x0000003a, 0x000500ae, 0x0000003c, 0x0000003d, 0x00000032,
				0x0000003b, 0x000300f7, 0x0000003f, 0x00000000, 0x000400fa, 0x0000003d, 0x0000003e, 0x0000003f, 0x000200f8, 0x0000003e, 0x000100fd, 0x000200f8,
				0x0000003f, 0x0004003d, 0x00000006, 0x0000004b, 0x0000002c, 0x00050084, 0x00000006, 0x0000004c, 0x00000015, 0x0000004b, 0x00060041, 0x00000039,
				0x0000004d, 0x0000004a, 0x00000046, 0x0000004c, 0x0004003d, 0x00000006, 0x0000004e, 0x0000004d, 0x0004003d, 0x00000006, 0x00000053, 0x0000002c,
				0x00050084, 0x00000006, 0x00000054, 0x00000015, 0x00000053, 0x00060041, 0x00000055, 0x00000056, 0x00000052, 0x00000046, 0x00000054, 0x0004003d,
				0x00000041, 0x00000057, 0x00000056, 0x00060041, 0x00000055, 0x00000058, 0x00000045, 0x00000046, 0x0000004e, 0x0003003e, 0x00000058, 0x00000057,
				0x0004003d, 0x00000006, 0x00000059, 0x0000002c, 0x00050084, 0x00000006, 0x0000005a, 0x00000015, 0x00000059, 0x00050080, 0x00000006, 0x0000005b,
				0x0000005a, 0x00000012, 0x00050041, 0x00000039, 0x0000005c, 0x00000036, 0x00000038, 0x0004003d, 0x00000006, 0x0000005d, 0x0000005c, 0x000500ae,
				0x0000003c, 0x0000005e, 0x0000005b, 0x0000005d, 0x000300f7, 0x00000060, 0x00000000, 0x000400fa, 0x0000005e, 0x0000005f, 0x00000060, 0x000200f8,
				0x0000005f, 0x000100fd, 0x000200f8, 0x00000060, 0x0004003d, 0x00000006, 0x00000062, 0x0000002c, 0x00050084, 0x00000006, 0x00000063, 0x00000015,
				0x00000062, 0x00050080, 0x00000006, 0x00000064, 0x00000063, 0x00000012, 0x00060041, 0x00000039, 0x00000065, 0x0000004a, 0x00000046, 0x00000064,
				0x0004003d, 0x00000006, 0x00000066, 0x00000065, 0x0004003d, 0x00000006, 0x00000067, 0x0000002c, 0x00050084, 0x00000006, 0x00000068, 0x00000015,
				0x00000067, 0x00050080, 0x00000006, 0x00000069, 0x00000068, 0x00000012, 0x00060041, 0x00000055, 0x0000006a, 0x00000052, 0x00000046, 0x00000069,
				0x0004003d, 0x00000041, 0x0000006b, 0x0000006a, 0x00060041, 0x00000055, 0x0000006c, 0x00000045, 0x00000046, 0x00000066, 0x0003003e, 0x0000006c,
				0x0000006b, 0x000100fd, 0x00010038, 0x00050036, 0x00000006, 0x0000000b, 0x00000000, 0x00000009, 0x00030037, 0x00000008, 0x0000000a, 0x000200f8,
				0x0000000c, 0x0004003b, 0x00000008, 0x0000000d, 0x00000007, 0x0004003d, 0x00000007, 0x00000010, 0x0000000f, 0x00050084, 0x00000007, 0x00000014,
				0x00000010, 0x00000013, 0x0003003e, 0x0000000d, 0x00000014, 0x00050041, 0x00000016, 0x00000017, 0x0000000a, 0x00000015, 0x0004003d, 0x00000006,
				0x00000018, 0x00000017, 0x00050041, 0x00000016, 0x00000019, 0x0000000d, 0x00000012, 0x0004003d, 0x00000006, 0x0000001a, 0x00000019, 0x00050084,
				0x00000006, 0x0000001b, 0x00000018, 0x0000001a, 0x00050041, 0x00000016, 0x0000001d, 0x0000000d, 0x0000001c, 0x0004003d, 0x00000006, 0x0000001e,
				0x0000001d, 0x00050084, 0x00000006, 0x0000001f, 0x0000001b, 0x0000001e, 0x00050041, 0x00000016, 0x00000020, 0x0000000a, 0x00000012, 0x0004003d,
				0x00000006, 0x00000021, 0x00000020, 0x00050041, 0x00000016, 0x00000022, 0x0000000d, 0x0000001c, 0x0004003d, 0x00000006, 0x00000023, 0x00000022,
				0x00050084, 0x00000006, 0x00000024, 0x00000021, 0x00000023, 0x00050080, 0x00000006, 0x00000025, 0x0000001f, 0x00000024, 0x00050041, 0x00000016,
				0x00000026, 0x0000000a, 0x0000001c, 0x0004003d, 0x00000006, 0x00000027, 0x00000026, 0x00050084, 0x00000006, 0x00000028, 0x00000027, 0x00000012,
				0x00050080, 0x00000006, 0x00000029, 0x00000025, 0x00000028, 0x000200fe, 0x00000029, 0x00010038
			};

			static constexpr uint32_t max_id = 500; // unused
			static constexpr std::array predef_types = { spirv::SPIRType{ spirv::type_name<spirv::Type<uint32_t>>(), 6u },
				                                           spirv::SPIRType{ spirv::type_name<spirv::Type<bool>>(), 59u },
				                                           spirv::SPIRType{ spirv::type_name<spirv::Type<float>>(), 64u } };

			static constexpr std::span<const uint32_t> second_bit = std::span(std::begin(template_bytes) + 0x00000650 / 4, std::end(template_bytes));
			static constexpr std::span<const uint32_t> epilogue = {};

			template<class F>
			static constexpr auto specialize(spirv::SPIRVModule&, F&& f) {
				using namespace spirv;

				return spirv::Id{ 0 }; // we don't embed spirv for this one
			}

			constexpr auto compile() {
				auto [count, spirv] = spirv::SPIRVTemplate<SPIRVScatter<T1>>::compile([]() {});
				auto new_tid = this->spvmodule.template type_id<spirv::Type<T1>>();
				auto old_tid = 64u;
				if (new_tid == old_tid) {
					return std::pair(count, spirv);
				}
				std::span words = std::span(spirv.begin(), spirv.begin() + count);
				for (size_t i = 5; i < words.size();) {
					auto& word = words[i];
					auto opcode = (spv::Op)(word & spv::OpCodeMask);
					auto word_count = word >> spv::WordCountShift;

					switch (opcode) {
					case spv::OpConstant:
						if (words[i + 1] == old_tid) {
							words[i + 1] = new_tid;
						}
						break;
					case spv::OpTypeFunction:
					case spv::OpTypeRuntimeArray:
					case spv::OpTypePointer:
					case spv::OpTypeArray:
					case spv::OpFunctionCall:
					case spv::OpLoad:
					case spv::OpStore:
					case spv::OpFunction:
						spirv::replace_all_ids(std::span(&words[i + 1], word_count - 1), old_tid, new_tid);
						break;
					case spv::OpFAdd:
						if constexpr (std::is_integral_v<T1>) {
							word = spirv::op(spv::OpIAdd, word_count);
						}
						spirv::replace_all_ids(std::span(&words[i + 1], word_count - 1), old_tid, new_tid);
						break;
					case spv::OpFOrdEqual:
						if constexpr (std::is_integral_v<T1>) {
							word = spirv::op(spv::OpIEqual, word_count);
						}
						spirv::replace_all_ids(std::span(&words[i + 1], word_count - 1), old_tid, new_tid);
						break;
					default:;
					}

					i += word_count;
				}

				return std::pair(count, spirv);
			}
		};
	} // namespace detail

	template<class T>
	inline Future scatter(Context& ctx, Future src, Future dst, Future indirection, Future count) {
		auto scatter_spv_result = detail::SPIRVScatter<T>().compile();
		static auto pbi = detail::static_compute_pbi(ctx, scatter_spv_result.second.data(), scatter_spv_result.first, "scatter");
		std::shared_ptr<RenderGraph> rgp = std::make_shared<RenderGraph>("scatter");
		rgp->attach_in("src", std::move(src));
		rgp->attach_in("indirection", std::move(indirection));
		rgp->attach_in("count", std::move(count));
		if (dst) {
			rgp->attach_in("dst", std::move(dst));
		} else {
			rgp->attach_buffer("dst", Buffer{ .memory_usage = vuk::MemoryUsage::eGPUonly });
			rgp->inference_rule("dst", same_size_as("src"));
		}

		rgp->add_pass({ .name = "scatter",
		                .resources = { "src"_buffer >> eComputeRead,
		                               "indirection"_buffer >> eComputeRead,
		                               "dst"_buffer >> eComputeWrite,
		                               "count"_buffer >> (eComputeRW | eIndirectRead) },
		                .execute = [](CommandBuffer& command_buffer) {
			                command_buffer.bind_buffer(0, 0, "src");
			                command_buffer.bind_buffer(0, 1, "dst");
			                command_buffer.bind_buffer(0, 2, "indirection");
			                command_buffer.bind_buffer(0, 3, "count");
			                command_buffer.bind_compute_pipeline(pbi);
			                command_buffer.dispatch_indirect("count");
		                } });
		return { rgp, "dst+" };
	}

} // namespace vuk