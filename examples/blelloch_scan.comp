#version 450
#pragma shader_stage(compute)

#extension GL_EXT_shared_memory_block : require
#extension GL_EXT_buffer_reference : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_KHR_shader_subgroup_basic : require

layout(buffer_reference, std430, buffer_reference_align = 4) buffer bufUI {
    uint x;
};

layout (push_constant) uniform PC {
    uint64_t source;
    uint64_t dst;
    uint64_t tmp;
	uint count;
};

layout (local_size_x = 64) in;

// https://developer.nvidia.com/gpugems/gpugems3/part-vi-gpu-computing/chapter-39-parallel-prefix-sum-scan-cuda
const uint array_size = 128;
shared TempUI {
    uint temp_ui[array_size];
};

uint linear_index(uvec3 id){
	uvec3 mp = gl_NumWorkGroups * gl_WorkGroupSize;
	return id.z * mp.y * mp.x + id.y * mp.x + id.x * 1;
}

void scan_uint(uint n, uint64_t src, uint64_t dst, uint64_t tmp, uint gid) {
    uint thid = gl_LocalInvocationIndex;
    int offset = 1;
    bufUI g_idata_ui = bufUI(src);
    bufUI g_odata_ui = bufUI(dst);
    temp_ui[2*thid] = g_idata_ui[2*gid].x; // load input into shared memory
    temp_ui[2*thid+1] = g_idata_ui[2*gid+1].x;

    for (uint d = n>>1; d > 0; d >>= 1) { // build sum in place up the tree
        barrier();
        if (thid < d) {
            uint ai = offset*(2*thid+1)-1;
            uint bi = offset*(2*thid+2)-1;
            temp_ui[bi] += temp_ui[ai];
        }
        offset *= 2;
    } 

    if (thid == 0) {
        if(tmp > 0) {
            bufUI g_temp = bufUI(tmp);
            g_temp[gl_WorkGroupID.x].x = temp_ui[n - 1];
        }
        temp_ui[n - 1] = 0;  // clear the last element 
    }
 	
    for (int d = 1; d < n; d *= 2){ // traverse down tree & build scan 
        offset >>= 1;      
        barrier();
        if (thid < d) {
            uint ai = offset*(2*thid+1)-1;
            uint bi = offset*(2*thid+2)-1; 
            uint t = temp_ui[ai]; 
            temp_ui[ai] = temp_ui[bi];
            temp_ui[bi] += t;
        } 
    }  
    barrier();

    g_odata_ui[2*gid].x = temp_ui[2*thid]; // write results to device memory      
    g_odata_ui[2*gid+1].x = temp_ui[2*thid+1];
}

shared TempF {
    float temp_f[array_size];
};

void main() {
    bufUI wg_counter = bufUI(tmp);
    atomicExchange(wg_counter.x, 0);
    barrier();
    uint gid = linear_index(gl_GlobalInvocationID);
    scan_uint(array_size, source, dst, tmp + 4, gid);
    if(gl_LocalInvocationIndex == 0){
        if(atomicAdd(wg_counter.x, 1) != (gl_NumWorkGroups.x - 1))
            return;
    }
    atomicExchange(wg_counter.x, 77);
    // surviving WG : needs loop
    scan_uint(count / array_size, tmp + 4, tmp + 4 + array_size * 4, 0, gl_LocalInvocationIndex);
}