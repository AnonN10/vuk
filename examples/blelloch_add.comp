#version 450
#pragma shader_stage(compute)

#extension GL_EXT_shared_memory_block : require
#extension GL_EXT_buffer_reference : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

layout(buffer_reference, std430, buffer_reference_align = 4) buffer bufUI {
    uint x;
};

layout (push_constant) uniform PC {
    bufUI source;
    bufUI dst;
    bufUI tmp;
	uint count;
};

layout (local_size_x = 64) in;

// https://developer.nvidia.com/gpugems/gpugems3/part-vi-gpu-computing/chapter-39-parallel-prefix-sum-scan-cuda
const uint array_size = 128;

uint linear_index(uvec3 id){
	uvec3 mp = gl_NumWorkGroups * gl_WorkGroupSize;
	return id.z * mp.y * mp.x + id.y * mp.x + id.x * 1;
}

void add_uint(uint n, uint64_t src, uint64_t dst, uint64_t tmp) {
	uint gid = linear_index(gl_GlobalInvocationID);
    uint thid = gl_LocalInvocationIndex;
    bufUI g_idata_ui = bufUI(src);
    bufUI g_odata_ui = bufUI(dst);
    bufUI temp = bufUI(tmp);
    uint a1 = g_idata_ui[2*gid + 128].x; // we don't process the first block
    uint a2 = g_idata_ui[2*gid+1 + 128].x;

    g_odata_ui[2*gid + 128].x = a1 + temp[gl_WorkGroupID.x + 1].x; // write results to device memory      
    g_odata_ui[2*gid+1 + 128].x = a2 + temp[gl_WorkGroupID.x + 1].x;
}

void main() {
    add_uint(count, uint64_t(dst), uint64_t(dst), uint64_t(tmp) + 4 + array_size * 4);
}